import telebot
from telebot import types

import DBApi_new as db

token = '1657569148:AAFjoH6Q7Vv-bkme2SUghcdYYWJybOWaDZM'

bookBot = telebot.TeleBot(token)

counter = 0

query_book_finder = ""

@bookBot.message_handler(commands=['start'])
def start_bot(message):
    img = open('welcome.png', 'rb')
    bookBot.send_photo(message.chat.id, img, "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ *BookBot* üôã‚Äç‚ôÇ\n\n"
                                             "üìï-------------------------------------------------------üìò\n\n"
                                             "–ë–æ—Ç –∑ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—é –±–∞–∑–æ—é –∫–Ω–∏–≥ üòÄ\n\n"
                                             "üí° –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥ –Ω–∞—Ç–∏—Å–Ω–∏ /help", parse_mode='Markdown')


@bookBot.message_handler(commands=['help'])
def help_bot(message):
    bookBot.send_message(message.chat.id, "–Ø–∫ –º–Ω–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å?\n"
                                          "–í—Å–µ –¥—É–∂–µ –ø—Ä–æ—Å—Ç–æ, –≤–∏–±–∏—Ä–µ —Å–ø–æ—Å—ñ–± –ø–æ—à—É–∫—É —Ç–∞ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏ –∞–±–æ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ—à—É–∫—É"
                                          "\n\n"
                                          "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω–µ: \n\n"
                                          "/start - –ø–µ—Ä—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∑ —è–∫–æ—ó –ø–æ—á–Ω–µ—Ç—å—Å—è –Ω–∞—à–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è\n"
                                          "/book *–ù–ê–ó–í–ê –ö–ù–ò–ì–ò* - –ø–æ—à—É–∫ –∫–Ω–∏–∂–∫–∏ –ø–æ —ó—ó –Ω–∞–∑–≤—ñ\n"
                                          "/author *–Ü–ú'–Ø –ê–í–¢–û–†–ê* - –ø–æ—à—É–∫ –∫–Ω–∏–∂–∫–∏ –ø–æ –∞–≤—Ç–æ—Ä—É\n"
                                          "/random - –≤–∏–ø–∞–¥–∫–æ–≤–∞ –∫–Ω–∏–∂–∫–∞", parse_mode='Markdown')


@bookBot.message_handler(commands=['book'])
def book_finder(message):
    print(message.text)
    global counter, books, query_book_finder

    book_name = str(message.text).replace("/book", "")
    book_name = book_name.lstrip()


    if book_name == "":
         bookBot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å *–ù–ê–ó–í–£ –ö–ù–ò–ì–ò*", parse_mode='Markdown')
         return

    query_book_finder = book_name

    books = db.find_name(book_name, 0)

    markup_inline = types.InlineKeyboardMarkup()
    prev = types.InlineKeyboardButton(text='Prev', callback_data='book_finder_prev')
    next = types.InlineKeyboardButton(text='Next', callback_data='book_finder_next')
    markup_inline.add(prev, next)

    if counter < 0:
        counter = len(books) - 1
    if counter > len(books) - 1:
        counter = 0

    if len(books) > 0:
        bookBot.send_message(message.chat.id, "[" + str(counter+1) + "/" + str(books.__len__()) + "] "
                            + "–Ü–∑ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫—ñ –∫–Ω–∏–≥–∏: \n\n"
                            + books[counter].show_info(), reply_markup=markup_inline)
    else:
        bookBot.send_message(message.chat.id, "–ü–æ –≤–∞—à–æ–º—É –∑–∞–ø–∏—Ç—É –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")




@bookBot.message_handler(commands=['author'])
def author_finder(message):

    global counter, books, query_book_finder

    author_name = str(message.text).replace("/author", "")
    author_name = author_name.lstrip()
    if author_name == "":
        bookBot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å *–ù–ê–ó–í–£ –ö–ù–ò–ì–ò*", parse_mode='Markdown')
        return

    query_book_finder = author_name

    books = db.find_name(author_name, 1)

    markup_inline = types.InlineKeyboardMarkup()
    prev = types.InlineKeyboardButton(text='Prev', callback_data='book_finder_prev')
    next = types.InlineKeyboardButton(text='Next', callback_data='book_finder_next')
    markup_inline.add(prev, next)

    if counter < 0:
        counter = len(books) - 1
    if counter > len(books) - 1:
        counter = 0
    print(counter)
    bookBot.send_message(message.chat.id, "[" + str(counter + 1) + "/" + str(books.__len__()) + "] "
                         + "–Ü–∑ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫—ñ –∫–Ω–∏–≥–∏: \n\n"
                         + books[counter].show_info(), reply_markup=markup_inline)


@bookBot.message_handler(commands=['random'])
def random_finder(message):
    for book in db.take_random_book(1):
        bookBot.send_message(message.chat.id, book.show_info(), parse_mode='Markdown')

@bookBot.callback_query_handler(func=lambda call: True)
def finder_counter(call):
    global counter
    if call.data == 'book_finder_next':
        counter += 1
        call.message.text = query_book_finder
        book_finder(call.message)
    if call.data == 'book_finder_prev':
        counter -= 1
        call.message.text = query_book_finder
        book_finder(call.message)

def start_bot():
    bookBot.polling(none_stop=True, interval=0)
